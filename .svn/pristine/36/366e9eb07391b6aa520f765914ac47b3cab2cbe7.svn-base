package com.android.print.demo;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.databinding.DataBindingUtil;
import android.hardware.usb.UsbManager;
import android.net.DhcpInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Toast;

import com.android.print.demo.bluetooth.BluetoothDeviceList;
import com.android.print.demo.bluetooth.BluetoothOperation;
import com.android.print.demo.databinding.ActivityMainBinding;
import com.android.print.demo.usb.UsbOperation;
import com.android.print.demo.util.PrintUtils;
import com.android.print.demo.wifi.WifiOperation;
import com.android.print.sdk.PrinterConstants;
import com.android.print.sdk.PrinterInstance;
import com.android.print.sdk.bluetooth.BluetoothPort;
import com.android.print.sdk.wifi.WifiAdmin;

import java.util.Arrays;
import java.util.Timer;


/**
 * Android 打印机SDK 开发示例 v3.0
 * QQ 2227421573
 *
 */
public class MainActivity extends AppCompatActivity {
    private Context context;
    private ActivityMainBinding binding;

    private static boolean isConnected;                 //是否已经建立了连接
    protected static IPrinterOpertion myOpertion;
    private PrinterInstance mPrinter;
    private ProgressDialog dialog;


    public static final int CONNECT_DEVICE = 1;
    public static final int ENABLE_BT = 2;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);

        context = this;

        initView();
    }


    /**
     * 界面初始化
     */
    private void initView(){
        binding.connectLayout.setOnClickListener(onClickListener);


        dialog = new ProgressDialog(context);
        dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        dialog.setTitle("Connecting...");
        dialog.setMessage("Please Wait...");
        dialog.setIndeterminate(true);
        dialog.setCancelable(false);
    }



    private View.OnClickListener onClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (v == binding.connectLayout){        //点击连接
                connClick();

            }else if(v == binding.printText){       //打印文字
                if(isConnected && mPrinter != null) {
                    PrintUtils.printText(context.getResources(), mPrinter);
                }
            }else if(v == binding.printImage){
                if(isConnected && mPrinter != null) {
                    PrintUtils.printImage(context.getResources(), mPrinter);
                }
            }
        }
    };





    //用于接受连接状态消息的 Handler
    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case PrinterConstants.Connect.SUCCESS:
                    isConnected = true;
                    mPrinter = myOpertion.getPrinter();
                    java.util.Timer timer = new Timer();
                    myTask = new MyTask();
                    timer.schedule(myTask, 0, 2000);
                    Toast.makeText(context, R.string.yesconn, Toast.LENGTH_SHORT).show();
                    break;
                case PrinterConstants.Connect.FAILED:
                    if(myTask != null){
                        myTask.cancel();
                    }
                    isConnected = false;
                    Toast.makeText(context, R.string.conn_failed, Toast.LENGTH_SHORT).show();
                    break;
                case PrinterConstants.Connect.CLOSED:
                    if(myTask != null){
                        myTask.cancel();
                    }
                    isConnected = false;
                    Toast.makeText(context, R.string.conn_closed, Toast.LENGTH_SHORT).show();
                    break;
                case PrinterConstants.Connect.NODEVICE:
                    isConnected = false;
                    Toast.makeText(context, R.string.conn_no, Toast.LENGTH_SHORT).show();
                    break;

                default:
                    break;
            }

            updateButtonState();

            if (dialog != null && dialog.isShowing()) {
                dialog.dismiss();
            }
        }

    };


    private String bt_mac;
    private String bt_name;
    private String wifi_mac;
    private String wifi_name;


    /**
     * 更新界面状态
     */
    private void updateButtonState() {
        if(!isConnected){
            binding.connectAddress.setText(R.string.no_conn_address);
            binding.connectState.setText(R.string.connect);
            binding.connectName.setText(R.string.no_conn_name);
        }else{
            switch (binding.tabLayout.getSelectedTabPosition()){
                case 0:{
                    if( bt_mac!=null && !bt_mac.equals("")){
                        binding.connectAddress.setText(getString(R.string.str_address)+ bt_mac);
                        binding.connectState.setText(R.string.disconnect);
                        binding.connectName.setText(getString(R.string.str_name)+bt_name);
                    }else if(bt_mac==null ) {
                        bt_mac= BluetoothPort.getmDeviceAddress();
                        bt_name=BluetoothPort.getmDeviceName();
                        binding.connectAddress.setText(getString(R.string.str_address)+bt_mac);
                        binding.connectState.setText(R.string.disconnect);
                        binding.connectName.setText(getString(R.string.str_name)+bt_name);
                    }
                    break;
                }
                case 1:{
                    binding.connectAddress.setText(getString(R.string.str_address)+wifi_mac);
                    binding.connectState.setText(R.string.disconnect);
                    binding.connectName.setText(getString(R.string.str_name)+wifi_name);
                    break;
                }
                case 2:{
                    binding.connectAddress.setText(getString(R.string.disconnect));
                    binding.connectState.setText(R.string.disconnect);
                    binding.connectName.setText(getString(R.string.disconnect));
                    break;
                }
            }
        }
    }




    private void connClick(){
        if(isConnected){        //如果已经连接了, 则断开
            myOpertion.close();
            myOpertion = null;
            mPrinter = null;
        }else{
                                //如果没有连接, 则提示
            new AlertDialog.Builder(context)
                    .setTitle(R.string.str_message)
                    .setMessage(R.string.str_connlast)
                    .setPositiveButton(R.string.yesconn, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int arg1) {
                            openConn();
                        }
                    })
                    .setNegativeButton(R.string.str_resel, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            reselConn();
                        }
                    })
                    .show();
        }
    }
    

    /**
     * 打开连接
     */
    private void openConn(){
        switch (binding.tabLayout.getSelectedTabPosition()){
            case 0:{        //蓝牙
                myOpertion = new BluetoothOperation(context, mHandler);
                myOpertion.btAutoConn(context,  mHandler);
                break;
            }
            case 1:{        //WIFI
                WifiManager mWifi =(WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
                if (!mWifi.isWifiEnabled()) {
                    mWifi.setWifiEnabled(true);
                    return;     //wifi没有启用
                }
                WifiInfo wifiInfo = mWifi.getConnectionInfo();
                wifi_name = wifiInfo.getSSID();
                if (wifi_name != null && !wifi_name.equals("")) {
                    DhcpInfo dhcpinfo = mWifi.getDhcpInfo();
                    WifiAdmin mWifiAdmin = new WifiAdmin(MainActivity.this);
                    wifi_mac = mWifiAdmin.intToIp(dhcpinfo.serverAddress);

                    myOpertion = new WifiOperation(MainActivity.this, mHandler);
                    Intent intent=new Intent();
                    intent.putExtra("ip_address", wifi_mac);
                    myOpertion.open(intent);
                }
                break;
            }
            case 2:{            //USB
                myOpertion = new UsbOperation(MainActivity.this, mHandler);
                UsbManager manager = (UsbManager)getSystemService(Context.USB_SERVICE);
                myOpertion.usbAutoConn(manager);
                break;
            }
        }
    }


    /**
     * 重新连接
     */
    private void reselConn(){
        switch (binding.tabLayout.getSelectedTabPosition()){
            case 0:{
                myOpertion = new BluetoothOperation(context, mHandler);
                myOpertion.chooseDevice();
                break;
            }
            case 1:{
                myOpertion = new WifiOperation(context, mHandler);
                myOpertion.chooseDevice();
                break;
            }
            case 2:{
                myOpertion = new UsbOperation(context, mHandler);
                myOpertion.chooseDevice();
                break;
            }
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, final Intent data) {
        super.onActivityResult(requestCode, resultCode, data);


        //选择连接设备返回处理
        if(requestCode == CONNECT_DEVICE && resultCode == RESULT_OK){
            switch (binding.tabLayout.getSelectedTabPosition()){
                case 0:{        //蓝牙
                    bt_mac = data.getExtras().getString(BluetoothDeviceList.EXTRA_DEVICE_ADDRESS);
                    bt_name = data.getExtras().getString(BluetoothDeviceList.EXTRA_DEVICE_NAME);
                    dialog.show();
                    new Thread(new Runnable() {
                        public void run() {
                            myOpertion.open(data);
                        }
                    }).start();
                    break;
                }


                case 1:{        //WIFI
                    wifi_mac = data.getStringExtra("ip_address");
                    wifi_name = data.getExtras().getString("device_name");
                    if (!wifi_mac.equals("") && wifi_mac != null) {
                        myOpertion.open(data);
                        dialog.show();
                    } else {
                        mHandler.obtainMessage(PrinterConstants.Connect.FAILED).sendToTarget();
                    }

                    break;
                }

                case 2:{        //USB
                    myOpertion.open(data);
                    break;
                }
            }


        //请求打开蓝牙返回
        }else if(requestCode == ENABLE_BT){
            if (resultCode == Activity.RESULT_OK) {
                myOpertion.chooseDevice();
            } else {
                Toast.makeText(this, R.string.bt_not_enabled, Toast.LENGTH_SHORT).show();
            }
        }
    }

    private MyTask myTask;
    private class MyTask extends java.util.TimerTask{
        @Override
        public void run() {
            byte[] by = mPrinter.read();
            if(by != null){
                System.out.println(mPrinter.isConnected() + " read byte " + Arrays.toString(by));
            }
        }
    }
}
